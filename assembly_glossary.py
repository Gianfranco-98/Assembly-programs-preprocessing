from collections import defaultdict

GLOSSARY = [
    '*Data Transfer Instructions*',
    'bswap',
    'cbw',
    'cdq',
    'cdqe',
    'cmova',
    'cmovae',
    'cmovb',
    'cmovbe',
    'cmovc',
    'cmove',
    'cmovg',
    'cmovge',
    'cmovl',
    'cmovle',
    'cmovna',
    'cmovnae',
    'cmovnb',
    'cmovnbe',
    'cmovnc',
    'cmovne',
    'cmovng',
    'cmovnge',
    'cmovnl',
    'cmovnle',
    'cmovno',
    'cmovnp',
    'cmovns',
    'cmovnz',
    'cmovo',
    'cmovp',
    'cmovpe',
    'cmovpo',
    'cmovs',
    'cmovz',
    'cmpxchg',
    'cmpxchg8b',
    'cqo',
    'cwd',
    'cwde',
    'mov',
    'movabs',
    'movsx',
    'movsxd',
    'movzx',
    'pop',
    'popa',
    'popad',
    'push',
    'pusha',
    'pushad',
    'xadd',
    'xchg',
    'movaps',
    'movhlps',
    'movhps',
    'movlhps',
    'movlps',
    'movmskps',
    'movss',
    'movups',
    'movapd',
    'movhpd',
    'movlpd',
    'movmskpd',
    'movsd',
    'movupd',
    'movd',
    'movq',
    '*Logical Instructions*',
    'packssdw',
    'packsswb',
    'packuswb',
    'punpckhbw',
    'punpckhdq',
    'punpckhwd',
    'punpcklbw',
    'punpckldq',
    'punpcklwd',
    'pand',
    'pandn',
    'por',
    'and',
    'not',
    'or',
    'xor',
    'rcl',
    'rcr',
    'rol',
    'ror',
    'sal',
    'sar',
    'shl',
    'shld',
    'shr',
    'shrd',
    'bsf',
    'bsr',
    'bt',
    'btc',
    'btr',
    'bts',
    'seta',
    'setae',
    'setb',
    'setbe',
    'setc',
    'sete',
    'setg',
    'setge',
    'setl',
    'setle',
    'setna',
    'setnae',
    'setnb',
    'setnbe',
    'setnc',
    'setne',
    'setng',
    'setnge',
    'setnl',
    'setnle',
    'setno',
    'setnp',
    'setns',
    'setnz',
    'seto',
    'setp',
    'setpe',
    'setpo',
    'sets',
    'setz',
    'test',
    'pxor',
    'pslld',
    'psllq',
    'psllw',
    'psrad',
    'psraw',
    'psrld',
    'psrlq',
    'psrlw',
    'andnps',
    'andps',
    'orps',
    'xorps',
    'shufps',
    'unpckhps',
    'unpcklps',
    'pavgb',
    'pavgw',
    'pextrw',
    'pinsrw',
    'pinsrd',
    'pmaxsw',
    'pmaxub',
    'pminsw',
    'pminub',
    'pmovmskb',
    'pmulhuw',
    'psadbw',
    'pshufw',
    'andnpd',
    'andpd',
    'orpd',
    'xorpd',
    'shufpd',
    'unpckhpd',
    'unpcklpd',
    'cvtdq2ps',
    'cvtps2dq',
    'cvttps2dq',
    'movdq2q',
    'movdqa',
    'movdqu',
    'movq2dq',
    'paddq',
    'pmuludq',
    'pshufd',
    'pshufhw',
    'pshuflw',
    'pslldq',
    'psrldq',
    'psubq',
    'punpckhqdq',
    'punpcklqdq',
    'clc',
    'cld',
    'cli',
    'cmc',
    'lahf',
    'popf',
    'popfl',
    'pushf',
    'pushfl',
    'sahf',
    'stc',
    'std',
    'sti',
    '*Control Transfer Instructions*',
    'bound',
    'call',
    'enter',
    'int',
    'into',
    'iret',
    'ja',
    'jae',
    'jb',
    'jbe',
    'jc',
    'jcxz',
    'je',
    'jecxz',
    'jg',
    'jge',
    'jl',
    'jle',
    'jmp',
    'jnae',
    'jnb',
    'jnbe',
    'jnc',
    'jne',
    'jng',
    'jnge',
    'jnl',
    'jnle',
    'jno',
    'jnp',
    'jns',
    'jnz',
    'jo',
    'jp',
    'jpe',
    'jpo',
    'js',
    'jz',
    'leave',
    'loop',
    'loope',
    'loopne',
    'loopnz',
    'loopz',
    'ret',
    '*String Instructions*',
    'cmps',
    'cmpsb',
    'cmpsd',
    'cmpsw',
    'lods',
    'lodsb',
    'lodsd',
    'lodsw',
    'movs',
    'movsb',
    'movsd',
    'movsw',
    'rep',
    'repne',
    'repnz',
    'repe',
    'repz',
    'scas',
    'scasb',
    'scasd',
    'scasw',
    'stos',
    'stosb',
    'stosd',
    'stosw',
    '*I/O Instructions*',
    'in',
    'ins',
    'insb',
    'insd',
    'insw',
    'out',
    'outs',
    'outsb',
    'outsd',
    'outsw',
    '*Register Instructions*',
    'lds',
    'les',
    'lfs',
    'lgs',
    'lss',
    '*Miscellaneous Instructions*',
    'cpuid',
    'lea',
    'nop',
    'ud2',
    'xlat',
    'xlatb',
    'maskmovq',
    'movntps',
    'movntq',
    'prefetchnta',
    'prefetcht0',
    'prefetcht1',
    'prefetcht2',
    'sfence',
    'clflush',
    'lfence',
    'maskmovdqu',
    'mfence',
    'movntdq',
    'movnti',
    'movntpd',
    'pause',
    '*Arithmetic Instructions*',
    'adc',
    'add',
    'cmp',
    'dec',
    'div',
    'idiv',
    'imul',
    'inc',
    'mul',
    'neg',
    'sbb',
    'sub',
    'aaa',
    'aad',
    'aam',
    'aas',
    'daa',
    'das',
    'fbld',
    'fbstp',
    'fcmovb',
    'fcmovbe',
    'fcmove',
    'fcmovnb',
    'fcmovnbe',
    'fcmovne',
    'fcmovnu',
    'fcmovu',
    'fild',
    'fist',
    'fistp',
    'fld',
    'fst',
    'fstp',
    'fxch',
    'fabs',
    'fadd',
    'faddp',
    'fchs',
    'fdiv',
    'fdivp',
    'fdivr',
    'fdivrp',
    'fiadd',
    'fidiv',
    'fidivr',
    'fimul',
    'fisub',
    'fisubr',
    'fmul',
    'fmulp',
    'fprem',
    'fprem1',
    'frndint',
    'fscale',
    'fsqrt',
    'fsub',
    'fsubp',
    'fsubr',
    'fsubrp',
    'fxtract',
    'f2xm1',
    'fcos',
    'fpatan',
    'fptan',
    'fsin',
    'fsincos',
    'fyl2x',
    'fyl2xp1',
    'fld1',
    'fldl2e',
    'fldl2t',
    'fldlg2',
    'fldln2',
    'fldpi',
    'fldz',
    'paddb',
    'paddd',
    'paddsb',
    'paddsw',
    'paddusb',
    'paddusw',
    'paddw',
    'pmaddwd',
    'pmulhw',
    'pmullw',
    'psubb',
    'psubd',
    'psubsb',
    'psubsw',
    'psubusb',
    'psubusw',
    'psubw',
    'addps',
    'addss',
    'divps',
    'divss',
    'maxps',
    'maxss',
    'minps',
    'minss',
    'mulps',
    'mulss',
    'rcpps',
    'rcpss',
    'rsqrtps',
    'rsqrtss',
    'sqrtps',
    'sqrtss',
    'subps',
    'subss',
    'addpd',
    'addsd',
    'divpd',
    'divsd',
    'maxpd',
    'maxsd',
    'minpd',
    'minsd',
    'mulpd',
    'mulsd',
    'sqrtpd',
    'sqrtsd',
    'subpd',
    'subsd',
    '*Control Instructions*',
    'fclex',
    'fdecstp',
    'ffree',
    'ffreep',
    'fincstp',
    'finit',
    'fldcw',
    'fldenv',
    'fnclex',
    'fninit',
    'fnop',
    'fnsave',
    'fnstcw',
    'fnstenv',
    'fnstsw',
    'frstor',
    'fsave',
    'fstcw',
    'fstenv',
    'fstsw',
    'fwait',
    'wait',
    '*Comparison Instructions*',
    'pcmpeqb',
    'pcmpeqd',
    'pcmpeqw',
    'pcmpgtb',
    'pcmpgtd',
    'pcmpgtw',
    'fcom',
    'fcomi',
    'fcomip',
    'fcomp',
    'fcompp',
    'ficom',
    'ficomp',
    'ftst',
    'fucom',
    'fucomi',
    'fucomip',
    'fucomp',
    'fucompp',
    'fxam',
    'cmpps',
    'cmpss',
    'comiss',
    'ucomiss',
    'cmppd',
    'cmpsd',
    'cmpnlesd',
    'comisd',
    'ucomisd',
    '*State Management Instructions*',
    'emms',
    'ldmxcsr',
    'stmxcsr',
    '*Conversion Instructions*',
    'cvtpi2ps',
    'cvtps2pi',
    'cvtsi2ss',
    'cvtss2si',
    'cvttps2pi',
    'cvttss2si',
    'cvtdq2pd',
    'cvtpd2dq',
    'cvtpd2pi',
    'cvtpd2ps',
    'cvtpi2pd',
    'cvtps2pd',
    'cvtsd2si',
    'cvtsd2ss',
    'cvtsi2sd',
    'cvtss2sd',
    'cvttpd2dq',
    'cvttpd2pi',
    'cvttsd2si',
    '*Operating System Support Instructions*',
    'arpl',
    'clts',
    'hlt',
    'invd',
    'invlpg',
    'lar',
    'lgdt',
    'lidt',
    'lldt',
    'lmsw',
    'lock', 
    'lsl',
    'ltr',
    'rdmsr',
    'rdpmc',
    'rdtsc',
    'rsm',
    'sgdt',
    'sidt',
    'sldt',
    'smsw',
    'str',
    'sysenter',
    'sysexit',
    'verr',
    'verw',
    'wbinvd',
    'wrmsr'
]
SPECIAL_CHAR = '*'


class Assembly_Glossary:

    def __init__(self):
        self.glossary = GLOSSARY
        self.special_char = SPECIAL_CHAR
    
    def getCategories(self):
        """
        Return all instruction categories in glossary
        """
        category_list = []
        for line in self.glossary:
            if self.special_char in line:
                category_list.append(line.replace(self.special_char, ""))
            continue        
        return category_list

    def getMnemonics(self):
        """
        Return all mnemonics in glossary
        """
        mnemonic_list = []
        for line in self.glossary:
            if self.special_char in line:
                continue
            mnemonic_list.append(line)
        return mnemonic_list

    def getDictionary(self):
        """
        Return a dictionary containing mnemonics with relative categories
        """
        assembly_dictionary = defaultdict(str)
        features = []
        f_i = e_i = 0
        for line in self.glossary:
            if self.special_char in line:
                features.append(line.replace(self.special_char, ""))
                e_i = 0
                f_i += 1 
                continue
            assembly_dictionary[(features[f_i-1], e_i)] += line
            e_i += 1
        return assembly_dictionary
